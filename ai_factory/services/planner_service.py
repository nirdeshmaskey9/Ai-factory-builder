import logging
from typing import List
from ai_factory.models import PlanStep, TaskType, DispatchResponse

logger = logging.getLogger(__name__)


class StubPlanner:
    """
    A simple, deterministic planner that turns a prompt into a few actionable steps.
    This is a placeholder for a future model-driven planner.
    """

    def _heuristic_decompose(self, prompt: str, task_type: TaskType) -> List[PlanStep]:
        # Basic heuristics to split into steps by punctuation or conjunctions
        text = " ".join(prompt.strip().split())
        candidates = []
        # Split on obvious boundaries
        for sep in [".", ";", " and then ", " then ", " -> ", " — "]:
            parts = []
            if sep in text:
                parts = [p.strip(" -—>.;") for p in text.split(sep)]
                candidates = [p for p in parts if p]
                break
        if not candidates:
            # Fallback: naive chunking by ~12 words
            words = text.split()
            chunk = 12
            candidates = [" ".join(words[i:i+chunk]) for i in range(0, len(words), chunk)]

        steps: List[PlanStep] = []
        for idx, c in enumerate(candidates):
            steps.append(
                PlanStep(
                    index=idx,
                    action=c,
                    rationale=f"Derived from prompt segment {idx+1}.",
                )
            )

        # Add guard-rail steps depending on task type
        if task_type in ("coding",):
            steps.insert(
                0,
                PlanStep(
                    index=0,
                    action="Scaffold repo and write minimal tests.",
                    rationale="Enable quick feedback and regression checks.",
                ),
            )
            # Reindex
            for i, s in enumerate(steps):
                s.index = i

        return steps

    def plan(self, prompt: str, task_type: TaskType) -> DispatchResponse:
        logger.info("Planning request: task_type=%s prompt_len=%d", task_type, len(prompt))
        steps = self._heuristic_decompose(prompt, task_type)
        # Rough token estimate: 1 token ~ 4 chars (very approximate)
        est_tokens = max(32, int(len(prompt) / 4) + 8 * len(steps))
        notes = "This plan was generated by a stub heuristic planner."
        return DispatchResponse.make(task_type=task_type, steps=steps, estimated_tokens=est_tokens, notes=notes)


planner = StubPlanner()
